#
# This file is auto-generated. ***ANY*** changes here will be lost
#

package Errno;
our (@EXPORT_OK,%EXPORT_TAGS,@ISA,$VERSION,%errno,$AUTOLOAD);
use Exporter ();
use strict;

$VERSION = "1.10";
$VERSION = eval $VERSION;
@ISA = qw(Exporter);

@EXPORT_OK = qw(ENOMSG EROFS ENOTSUP ESHUTDOWN EMULTIHOP EAUTH ED
	EPROTONOSUPPORT ENOLCK ENFILE EADDRINUSE ECONNABORTED EGRATUITOUS
	EBADF ECANCELED ENOTBLK EDEADLK ENOLINK EIEIO ENOTDIR ETIME ENOTTY
	EINVAL EXDEV EDIED ELOOP EGREGIOUS ECONNREFUSED ENOSTR EOVERFLOW
	EISCONN EFBIG ECONNRESET EPFNOSUPPORT ENOENT EWOULDBLOCK EBADMSG EDOM
	EBACKGROUND EPROGMISMATCH EMSGSIZE ERPCMISMATCH EDESTADDRREQ EIDRM
	ENOTSOCK EIO ENOSPC ERANGE EINPROGRESS ENOBUFS EADDRNOTAVAIL
	EAFNOSUPPORT ENOSYS EINTR EPROCUNAVAIL EHOSTDOWN EREMOTE EILSEQ ENOSR
	ENOMEM EPIPE ENETUNREACH ENOTCONN ESTALE ENODATA EPROGUNAVAIL EDQUOT
	EUSERS EOPNOTSUPP EPROTO EFTYPE ESPIPE EALREADY ENAMETOOLONG EMFILE
	EACCES ENOEXEC EPROCLIM EISDIR EBUSY E2BIG EPERM EEXIST ETOOMANYREFS
	ESOCKTNOSUPPORT ETIMEDOUT ENXIO ESRCH EBADRPC ENODEV ETXTBSY EFAULT
	EMLINK EAGAIN ENOPROTOOPT ECHILD ENETDOWN EHOSTUNREACH EPROTOTYPE
	ENEEDAUTH ENETRESET ENOTEMPTY);

%EXPORT_TAGS = (
    POSIX => [qw(
	E2BIG EACCES EADDRINUSE EADDRNOTAVAIL EAFNOSUPPORT EAGAIN EALREADY
	EBADF EBUSY ECHILD ECONNABORTED ECONNREFUSED ECONNRESET EDEADLK
	EDESTADDRREQ EDOM EDQUOT EEXIST EFAULT EFBIG EHOSTDOWN EHOSTUNREACH
	EINPROGRESS EINTR EINVAL EIO EISCONN EISDIR ELOOP EMFILE EMLINK
	EMSGSIZE ENAMETOOLONG ENETDOWN ENETRESET ENETUNREACH ENFILE ENOBUFS
	ENODEV ENOENT ENOEXEC ENOLCK ENOMEM ENOPROTOOPT ENOSPC ENOSYS ENOTBLK
	ENOTCONN ENOTDIR ENOTEMPTY ENOTSOCK ENOTTY ENXIO EOPNOTSUPP EPERM
	EPFNOSUPPORT EPIPE EPROCLIM EPROTONOSUPPORT EPROTOTYPE ERANGE EREMOTE
	EROFS ESHUTDOWN ESOCKTNOSUPPORT ESPIPE ESRCH ESTALE ETIMEDOUT
	ETOOMANYREFS ETXTBSY EUSERS EWOULDBLOCK EXDEV
    )]
);

sub EPERM () { 1073741825 }
sub ENOENT () { 1073741826 }
sub ESRCH () { 1073741827 }
sub EINTR () { 1073741828 }
sub EIO () { 1073741829 }
sub ENXIO () { 1073741830 }
sub E2BIG () { 1073741831 }
sub ENOEXEC () { 1073741832 }
sub EBADF () { 1073741833 }
sub ECHILD () { 1073741834 }
sub EDEADLK () { 1073741835 }
sub ENOMEM () { 1073741836 }
sub EACCES () { 1073741837 }
sub EFAULT () { 1073741838 }
sub ENOTBLK () { 1073741839 }
sub EBUSY () { 1073741840 }
sub EEXIST () { 1073741841 }
sub EXDEV () { 1073741842 }
sub ENODEV () { 1073741843 }
sub ENOTDIR () { 1073741844 }
sub EISDIR () { 1073741845 }
sub EINVAL () { 1073741846 }
sub ENFILE () { 1073741847 }
sub EMFILE () { 1073741848 }
sub ENOTTY () { 1073741849 }
sub ETXTBSY () { 1073741850 }
sub EFBIG () { 1073741851 }
sub ENOSPC () { 1073741852 }
sub ESPIPE () { 1073741853 }
sub EROFS () { 1073741854 }
sub EMLINK () { 1073741855 }
sub EPIPE () { 1073741856 }
sub EDOM () { 1073741857 }
sub ERANGE () { 1073741858 }
sub EWOULDBLOCK () { 1073741859 }
sub EAGAIN () { 1073741859 }
sub EINPROGRESS () { 1073741860 }
sub EALREADY () { 1073741861 }
sub ENOTSOCK () { 1073741862 }
sub EDESTADDRREQ () { 1073741863 }
sub EMSGSIZE () { 1073741864 }
sub EPROTOTYPE () { 1073741865 }
sub ENOPROTOOPT () { 1073741866 }
sub EPROTONOSUPPORT () { 1073741867 }
sub ESOCKTNOSUPPORT () { 1073741868 }
sub EOPNOTSUPP () { 1073741869 }
sub EPFNOSUPPORT () { 1073741870 }
sub EAFNOSUPPORT () { 1073741871 }
sub EADDRINUSE () { 1073741872 }
sub EADDRNOTAVAIL () { 1073741873 }
sub ENETDOWN () { 1073741874 }
sub ENETUNREACH () { 1073741875 }
sub ENETRESET () { 1073741876 }
sub ECONNABORTED () { 1073741877 }
sub ECONNRESET () { 1073741878 }
sub ENOBUFS () { 1073741879 }
sub EISCONN () { 1073741880 }
sub ENOTCONN () { 1073741881 }
sub ESHUTDOWN () { 1073741882 }
sub ETOOMANYREFS () { 1073741883 }
sub ETIMEDOUT () { 1073741884 }
sub ECONNREFUSED () { 1073741885 }
sub ELOOP () { 1073741886 }
sub ENAMETOOLONG () { 1073741887 }
sub EHOSTDOWN () { 1073741888 }
sub EHOSTUNREACH () { 1073741889 }
sub ENOTEMPTY () { 1073741890 }
sub EPROCLIM () { 1073741891 }
sub EUSERS () { 1073741892 }
sub EDQUOT () { 1073741893 }
sub ESTALE () { 1073741894 }
sub EREMOTE () { 1073741895 }
sub EBADRPC () { 1073741896 }
sub ERPCMISMATCH () { 1073741897 }
sub EPROGUNAVAIL () { 1073741898 }
sub EPROGMISMATCH () { 1073741899 }
sub EPROCUNAVAIL () { 1073741900 }
sub ENOLCK () { 1073741901 }
sub ENOSYS () { 1073741902 }
sub EFTYPE () { 1073741903 }
sub EAUTH () { 1073741904 }
sub ENEEDAUTH () { 1073741905 }
sub EBACKGROUND () { 1073741924 }
sub EDIED () { 1073741925 }
sub ED () { 1073741926 }
sub EGREGIOUS () { 1073741927 }
sub EIEIO () { 1073741928 }
sub EGRATUITOUS () { 1073741929 }
sub EILSEQ () { 1073741930 }
sub EBADMSG () { 1073741931 }
sub EIDRM () { 1073741932 }
sub EMULTIHOP () { 1073741933 }
sub ENODATA () { 1073741934 }
sub ENOLINK () { 1073741935 }
sub ENOMSG () { 1073741936 }
sub ENOSR () { 1073741937 }
sub ENOSTR () { 1073741938 }
sub EOVERFLOW () { 1073741939 }
sub EPROTO () { 1073741940 }
sub ETIME () { 1073741941 }
sub ENOTSUP () { 1073741942 }
sub ECANCELED () { 1073741943 }

sub TIEHASH { bless [] }

sub FETCH {
    my ($self, $errname) = @_;
    my $proto = prototype("Errno::$errname");
    my $errno = "";
    if (defined($proto) && $proto eq "") {
	no strict 'refs';
	$errno = &$errname;
        $errno = 0 unless $! == $errno;
    }
    return $errno;
}

sub STORE {
    require Carp;
    Carp::confess("ERRNO hash is read only!");
}

*CLEAR = \&STORE;
*DELETE = \&STORE;

sub NEXTKEY {
    my($k,$v);
    while(($k,$v) = each %Errno::) {
	my $proto = prototype("Errno::$k");
	last if (defined($proto) && $proto eq "");
    }
    $k
}

sub FIRSTKEY {
    my $s = scalar keys %Errno::;	# initialize iterator
    goto &NEXTKEY;
}

sub EXISTS {
    my ($self, $errname) = @_;
    my $r = ref $errname;
    my $proto = !$r || $r eq 'CODE' ? prototype($errname) : undef;
    defined($proto) && $proto eq "";
}

tie %!, __PACKAGE__;

1;
__END__

