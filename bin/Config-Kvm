#! /bin/bash

if [ $# != 4 -a $# != 5 ]
  then echo "$0 OS.img hostname VM-IP Ether-card [TAP-No]"
       echo "    TAP-No is optional, if need tap to be different from tap0."
  exit 1
elif [ ! -f $1 ]
  then echo "OS image: $1 does not exist."
  exit 2
elif [ ! -d /mnt/tmp ] 
  then echo "Mount point /mnt/tmp does not exist, create it first."
  exit 3
elif [ -z "`which SameSubnetP`" ]
  then echo "No SameSubnetP command, quit."
  exit 4
fi

# We also need to test hostname, VM-IP, Ether-card are legal ones.

if [ $# -eq 5 ]
  then TAP="tap${5}"
       KvmScript="start-${2}-${5}"
       StopAndRestoreLan="stop-${2}-restore-lan-${5}"
else TAP="tap0"
     KvmScript="start-${2}"
     StopAndRestoreLan="stop-${2}-restore-lan"
fi

DeclAutoGen="# Don't Edit, File automatically generated by Config-KVM script" 

# We need to get the Ip of the assigned ether card and its MAC address and get a 
# fake MAC address for our VM.
HostIP=`ifconfig $4 | egrep -o "inet [0-9]+.[0-9]+.[0-9]+.[0-9]+" | sed 's/^[ \t]*inet //'`
NetMask=`ifconfig $4 | egrep -o "netmask [0-9]+.[0-9]+.[0-9]+.[0-9]+" | sed 's/^[ \t]*netmask //'`
PREFIX=`ifconfig $4 | egrep -o "ether [0-9a-f]+:[0-9a-f]+:[0-9a-f]+:[0-9a-f]+" | sed 's/^ether //' | cut -d':' -f 1-3`
F4=`od -An -N1 -x /dev/random | sed 's/^\ 00//'`
F5=`od -An -N1 -x /dev/random | sed 's/^\ 00//'`
F6=`od -An -N1 -x /dev/random | sed 's/^\ 00//'`
FakeMac=$PREFIX:${F4}:${F5}:${F6}

echo " I got current IP: ${HostIP}, NetMask: ${NetMask}, FakeMac: ${FakeMac}"

# Check whether HostIP and VM-IP are in the same subnet.  If not, we need to turn 
# our ether device to be a router for VM-IP.  The third argument is VM-IP.
Return=`SameSubnetP ${HostIP} $3 ${NetMask}`

if [ x"${Return}" == x"1" ]
  then echo "${HostIP} and $3 are not in the same subnet, turn eth0 to be router."
       Eth0RouteStr="route add ${HostIP}/32 dev eth0"
elif [ x"${Return}" == x"0" ]
  then echo "${HostIP} and $3 are the same subnet."
       Eth0RouteStr=""
else echo "Something wrong about ${HostIP} $3 ${NetMask}"
     exit 5
fi

echo "$2" >hostname
echo "127.0.0.1       localhost.localdomain localhost" >hosts
# Without the next line, "$ hostname --fqdn" can't produce the correct hostname.
echo "127.0.1.1       $2" >>hosts
echo "" >>hosts
echo "# The following lines are desirable for IPv6 capable hosts" >>hosts
echo "# \(added automatically by netbase upgrade\)" >>hosts
echo "" >>hosts

echo "::1 ip6-localhost ip6-loopback" >>hosts
echo "fe00::0 ip6-localnet" >>hosts
echo "ff00::0 ip6-mcastprefix" >>hosts
echo "ff02::1 ip6-allnodes" >>hosts
echo "ff02::2 ip6-allrouters" >>hosts
echo "ff02::3 ip6-allhosts" >>hosts


HURD="No"
MINIX="No"
string=`basename $0`

if [ $string = "Config-Kvm-Minix" ]
  then echo "Configure Script for Minix, do Not mount template!"
  MINIX="Yes"
elif [ $string = "Config-Kvm-Hurd" ]
  then echo "Configure Script for Hurd, using poweroff command."
  HURD="Yes"
fi

echo "We need your root passwd for mounting $1:"
if [ $MINIX = "No" ]
   then sudo mount -o loop,offset=511705088 $1 /mnt/tmp
else echo "Minix Template?  Modify Minix template by hand!"
fi

# Minix Template must be done by hand, since its not Linux based system.
if [ $MINIX = "No" ]
  then 
    if [ ! -d /mnt/tmp/src2 ] 
      then sudo mkdir /mnt/tmp/src2
    fi

# Apparently, Debian adopts the lousy Ubuntu ether device rename policy.  We are forced 
# to empty the /etc/udev/rules.d/70*net* file!!  Otherwise, next time we boot our VM, 
# its ether device name will be wrong!

    WHOAMI=`whoami`
    sudo cp hostname /mnt/tmp/etc/hostname
    sudo cp /etc/resolv.conf /mnt/tmp/etc
    sudo cp hosts /mnt/tmp/etc/hosts
    sudo cp recover70rules /mnt/tmp/home/${WHOAMI}
    sudo cp ../DebianNetFiles/Empty70NetFile /mnt/tmp/home/${WHOAMI}

# Bring up ether interface and route packets to host in /etc/rc.local
    cp ../DebianNetFiles/rc.local.kvm rc.local
    echo "ifconfig eth0 $3" >>rc.local

# Recall that Host and Vm IP addresses are not in the same subnet,
# Hence the string ${Eth0RouteStr} is non-empty
    if [  -n "${Eth0RouteStr}" ]
      then echo "${Eth0RouteStr}" >>rc.local
    fi

    echo "route add default gw ${HostIP}" >>rc.local
    echo "" >>rc.local
 
    echo "exit 0" >>rc.local
    sudo cp rc.local /mnt/tmp/etc/rc.local
    sudo chmod 755 /mnt/tmp/etc/rc.local

    if [ ! -f /mnt/tmp/etc/ssh/ssh_config.orig ] 
      then sudo mv /mnt/tmp/etc/ssh/ssh_config /mnt/tmp/etc/ssh/ssh_config.orig 
    fi
    if [ ! -f /mnt/tmp/etc/ssh/sshd_config.orig ] 
      then sudo mv /mnt/tmp/etc/ssh/sshd_config /mnt/tmp/etc/ssh/sshd_config.orig 
    fi
    if [ ! -f /mnt/tmp/etc/apt/sources.list.orig ] 
      then sudo mv /mnt/tmp/etc/apt/sources.list /mnt/tmp/etc/apt/sources.list.orig
    fi

    sudo cp ../DebianNetFiles/ssh_config   /mnt/tmp/etc/ssh
    sudo cp ../DebianNetFiles/sshd_config  /mnt/tmp/etc/ssh
    sudo cp ../DebianNetFiles/sources.list /mnt/tmp/etc/apt  
    sudo umount /mnt/tmp
fi

# Next three files are no longer needed and rc.local does not exist for Minix
rm -f rc.local hostname hosts

# Preparing Host Network Configuration Script
echo "#! /bin/bash" >${KvmScript}
echo "" >>${KvmScript}

echo "${DeclAutoGen}" >>${KvmScript}
echo "if [ \$EUID -ne 0 ]" >>${KvmScript}
echo "   then sudo echo \"Super User passwd, please:\"" >>${KvmScript}
echo "        if [ \$? -ne 0 ]" >>${KvmScript}
echo "          then  echo \"Sorry, need su privilege!\"" >>${KvmScript}
echo "                exit 1" >>${KvmScript}
echo "        fi" >>${KvmScript}
echo "fi" >>${KvmScript}
echo "" >>${KvmScript}

# echo "sudo chmod 666 /dev/net/tun" >>${KvmScript}

# Minix3.3 uses virtio capacity
if [ $MINIX = "Yes" ] 
  then echo "# Nowadays, Minix3 uses vhost-net capacity, turn on it." >>${KvmScript}
       echo "sudo ./vhostOn.sh" >>${KvmScript}
       echo "" >>${KvmScript}
fi

echo "sudo tunctl -u `whoami` -t ${TAP}" >>${KvmScript}
echo "sudo ifconfig ${TAP} ${HostIP} netmask 255.255.255.255 up" >>${KvmScript}
echo "sudo iptables --table nat -A POSTROUTING --out-interface $4 -j MASQUERADE" >>${KvmScript}
echo "sudo iptables -A FORWARD --in-interface ${TAP} -j ACCEPT" >>${KvmScript}
# echo "sudo chmod 666 /dev/net/tun # First time only get 660" >>${KvmScript}
echo "sudo sysctl net.ipv4.ip_forward=1" >>${KvmScript}
echo "sudo sysctl net.ipv4.conf.${TAP}.proxy_arp=1" >>${KvmScript}
echo "sudo arp -Ds $3 $4 pub" >>${KvmScript}
echo "sudo route add -host $3 dev ${TAP}" >>${KvmScript}
echo "echo \"Starting vde_switch...\"" >>${KvmScript}
SrcDir=`dirname $(pwd)`
SockDir=${SrcDir}/network-$$
OPTIONS="-tap ${TAP} -mod 644 -sock=${SockDir} -mgmt ${SockDir}/vde_switch.mgmt"
echo SockDir=${SockDir} OPTIONS=${OPTIONS}
echo "vde_switch $OPTIONS -daemon </dev/null >/dev/null" >>${KvmScript}

echo "echo \"Starting VM: ${2}..., mem=512M\"" >>${KvmScript}


if [ $MINIX = "No" ] 
  then cp ${KvmScript} ${KvmScript}-efs
       echo "echo \"After $2 is up, mount /usr/local and /src2 by hand...\"" >>${KvmScript}-efs
       echo "echo \"     The commands are in /etc/rc.local\"" >>${KvmScript}-efs
       echo "kvm -net vde,vlan=0,sock=${SockDir} -net nic,vlan=0,macaddr=${FakeMac} -m 512M -monitor unix:${SockDir}/MonSock,server,nowait -hda $1 -hdb /dev/sda&" >>${KvmScript}-efs
fi 

cp ${KvmScript} ${KvmScript}-AsDaemon

if [ $MINIX = "No" ] 
  then echo "kvm -net vde,vlan=0,sock=${SockDir} -net nic,vlan=0,macaddr=${FakeMac} -m 512M -monitor unix:${SockDir}/MonSock,server,nowait -hda $1 &" >>${KvmScript}
       echo "screen -S $2 -d -m kvm -net vde,vlan=0,sock=${SockDir} -net nic,vlan=0,macaddr=${FakeMac} -m 512M -monitor unix:${SockDir}/MonSock,server,nowait -curses -hda $1 &" >>${KvmScript}-AsDaemon
else echo "kvm -net vde,vlan=0,sock=${SockDir} -net nic,model=virtio,macaddr=${FakeMac} -m 512M -monitor unix:${SockDir}/MonSock,server,nowait -hda $1 &" >>${KvmScript}
     echo "screen -S $2 -d -m kvm -net vde,vlan=0,sock=${SockDir} -net nic,model=virtio,macaddr=${FakeMac} -m 512M -monitor unix:${SockDir}/MonSock,server,nowait -curses -hda $1 &" >>${KvmScript}-AsDaemon
fi

# Preparing Restore Lan Script
echo "#! /bin/bash" >${StopAndRestoreLan}
echo "" >>${StopAndRestoreLan}
echo "${DeclAutoGen}" >>${StopAndRestoreLan}

echo "" >>${StopAndRestoreLan}
cat <<'MyFunc' >>${StopAndRestoreLan}

#############################################################
IsThereTapDevice()
  {
   declare int i=0;
   for devices in `find /sys/class/net -type l -name "tap*"`
     do
       ((i++));
     done

   if [ ${i} -gt 0 ]
     then echo "Yes"
   else echo "No"
   fi
  }
#############################################################

MyFunc

echo "if [ \$EUID -ne 0 ]" >>${StopAndRestoreLan}
echo "   then sudo echo \"Super User passwd, please:\"" >>${StopAndRestoreLan}
echo "        if [ \$? -ne 0 ]" >>${StopAndRestoreLan}
echo "          then  echo \"Sorry, need su privilege!\"" >>${StopAndRestoreLan}
echo "                exit 1" >>${StopAndRestoreLan}
echo "        fi" >>${StopAndRestoreLan}
echo "fi" >>${StopAndRestoreLan}
echo "" >>${StopAndRestoreLan}

echo "echo \"system_powerdown\" | socat - unix-connect:${SockDir}/MonSock" >>${StopAndRestoreLan}
echo "echo \"Please wait 10 seconds.\"" >>${StopAndRestoreLan}
echo "sleep 10"  >>${StopAndRestoreLan}
echo ""  >>${StopAndRestoreLan}
echo "ping -c 3 $3" >>${StopAndRestoreLan}
echo "" >>${StopAndRestoreLan}
echo "if [ \$? -eq 0 ]"  >>${StopAndRestoreLan}
echo "  then echo \"$2 still alive, shut it down.  Enter passwd twice!\"" >>${StopAndRestoreLan}

if [ $MINIX = "No"  -a $HURD = "No" ]
   then echo "       ssh -t ${USER}@$3 'sudo init 0'" >>${StopAndRestoreLan}
elif [ $HURD = "Yes" ]
   then echo "       ssh -t ${USER}@$3 'sudo /sbin/poweroff'" >>${StopAndRestoreLan}
else echo "       ssh -t ${USER}@$3 'poweroff'" >>${StopAndRestoreLan}
fi

echo "else rm -f ${SockDir}/MonSock" >>${StopAndRestoreLan}
echo "fi" >>${StopAndRestoreLan}
echo "" >>${StopAndRestoreLan}
echo "# Killing the vde_switch daemon" >>${StopAndRestoreLan}
echo "echo 'Stopping swich lan'" >>${StopAndRestoreLan}
echo "sudo pkill -f \"vde_switch ${OPTIONS}\"" >>${StopAndRestoreLan}
echo "# Removing the sockets if need be" >>${StopAndRestoreLan}
echo "if [ -S ${SockDir}/ctl ]; then rm ${SockDir}/ctl; fi" >>${StopAndRestoreLan}
echo "if [ -S ${SockDir}/vde_switch.mgmt ]; then rm ${SockDir}/vde_switch.mgmt; fi" >>${StopAndRestoreLan}
echo "if [ -d ${SockDir} ]; then rm -rf ${SockDir}; fi" >>${StopAndRestoreLan}

echo "echo \"Restore lan...\"" >>${StopAndRestoreLan}
echo "sudo sysctl net.ipv4.conf.${TAP}.proxy_arp=0" >>${StopAndRestoreLan}
echo "sudo ifconfig ${TAP} ${HostIP} down" >>${StopAndRestoreLan}
echo "sudo iptables --table nat -D POSTROUTING --out-interface $4 -j MASQUERADE" >>${StopAndRestoreLan}
echo "sudo iptables -D FORWARD --in-interface ${TAP} -j ACCEPT" >>${StopAndRestoreLan}
# It seems the next two lines are not necessary, we comment them out.
echo "# sudo route del -host $3 dev ${TAP}" >>${StopAndRestoreLan}
echo "# sudo arp -d $3" >>${StopAndRestoreLan}
echo "sudo tunctl -d ${TAP}" >>${StopAndRestoreLan}
echo "" >>${StopAndRestoreLan}
echo "if [ \`IsThereTapDevice\` = \"No\" ] " >>${StopAndRestoreLan} 
# echo "    then sudo chmod 600 /dev/net/tun" >>${StopAndRestoreLan}
echo "    then sudo sysctl net.ipv4.ip_forward=0" >>${StopAndRestoreLan}
echo "fi " >>${StopAndRestoreLan}

chmod 755 ${KvmScript} ${KvmScript}-AsDaemon ${KvmScript}-efs ${StopAndRestoreLan} 
